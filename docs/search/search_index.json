{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sushi IoT Board","text":"<p>Sushi Board is an ESP32-based programmable modular embedded system for general-purpose IoT, suitable for STEM education and DIY electronics projects. 100% based on widely available commercial modules, making it cost-effective and easy to source.</p> <ul> <li>Start and assembly guide </li> <li>Kit Contents </li> <li>Hardware guide</li> </ul>"},{"location":"#for-makers","title":"For MAKERs","text":"<ul> <li>A carrier board that connect all the essential components needed to create a complete IoT unit, suitable for various applications, minimizing the complexity of assembling different components and boards without requiring extensive soldering or wiring.</li> <li>Only the CPU is mandatory; then you simply plug in the modules you need for your specific purposes.</li> </ul>"},{"location":"#for-students-and-educational-purposes","title":"For students and educational purposes","text":"<ul> <li>Sushi Board offers a modular system that can be shared across multiple projects, from simple setups to more complex, DIY electronics systems. </li> <li>It\u2019s not just for desk experiments; you can build something practical and functional.</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Sushi-IoT-Board project on Kickstarter</li> <li>Sushi-IoT-Board on Instagram</li> <li>Sushi-IoT-Board documentation</li> <li>Espressif ESP32-DevKitC V4 user guide</li> </ul>"},{"location":"#advantages","title":"Advantages","text":"<ul> <li>Based on ESP32 SoC: a reliable choice in the IoT field. You have access to a powerful ecosystem with numerous resources available online.</li> <li>100% based on very common commercial modules widely available online for Arduino and DIY electronics projects. Sushi board just help you connect them all together.</li> <li>You can code with your favourite compiler : Arduino, microPython (even without a PC), Scratch, ESP-IDF, etc. </li> <li>Open source hardware: both the CPU module and the Sushi Board come with wiring diagrams provided.</li> </ul>"},{"location":"#applications","title":"Applications","text":"<ul> <li>Generic IoT &amp; sensors educational experiment</li> <li>Fast prototyping</li> <li>Home automation systems</li> <li>IoT central units</li> <li>Alarm systems</li> <li>Domotics servers</li> <li>Remote monitoring and data sampling systems (example weather centrals)</li> <li>Local and remote devices control (by local user interface, web interface, modem interface)</li> </ul>"},{"location":"#hardware-features","title":"Hardware features","text":"<p>All the ingredients that are needed for a myriad of applications: * ESP32-DevKitC V4 * 16x digital GPIN  * 2x Relay OUT (10A 250V AC) * 5x digital direct GPIO, 1 x GPO , 2 x GPI (LEDs, extra UART, etc.)  * Physical keyboard * OLED Display  * Connectivity: Wi-Fi, Bluetooth, modem 2G/3G/4G, UART, I2C * Power supply modes: 5V (USB adapter or wired) ; Battery only ; 5V + backup battery (for when grid power is missing) * Backup battery * Power status and battery level acquisition  * Buzzer for audio alerts * Temperature sensor * Size: 90x110 mm (both carrier and TOP boards)</p>"},{"location":"#why-sushi","title":"Why Sushi ?","text":"<p>The name \"Sushi board\" comes from the idea that, like sushi\u2014a traditional Japanese specialty\u2014the Sushi board is composed of various ingredients (the modules) that can be added or customized based on your preferences.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This product is intended for educational, hobbyist, and prototyping purposes only. It is not a certified end-user product and is not suitable for industrial, commercial, or medical applications. The manufacturer and distributors assume no responsibility for any damage, injury, or loss resulting from the use, misuse, or improper handling of this product. This product is provided \"as is\" without warranty of any kind, either expressed or implied, including but not limited to warranties of merchantability, fitness for a particular purpose, or non-infringement.</p> <p>This is not a toy and not intended for children under 14 years of age. It is classified as a development tool / unfinished electronic assembly, not subject to CE or FCC certification as a finished consumer device. Use at your own risk.</p>"},{"location":"guide/","title":"Start and assembly guide","text":""},{"location":"guide/#components-overview","title":"Components overview","text":"<p>After opening the package, you can learn about the components in your kit by comparing them with the kit contents list </p>"},{"location":"guide/#assembly","title":"Assembly","text":""},{"location":"guide/#soldering-components","title":"Soldering components","text":"<p>If your kit is not the pre-assembled version, you need to solder some components. All are very simple, traditional components, so even if you're not very skilled at soldering, this step is manageable.</p> <ul> <li>Average time required for non-experts: 2h  </li> <li>What you need: a soldering kit. Even a basic, cheap model is sufficient.  </li> </ul> <p>It's not mandatory, but the recommended steps to follow are:</p> <ol> <li> <p>Solder all the add-on module headers/sockets. In this picture, all add-on module headers and sockets are highlighted with different colors. </p> </li> <li> <p>Solder all the components Be careful with resistor values: they must match the values printed on the PCB. This may not be obvious to everyone \u2014 resistor values can be read using a tester or based on the colored lines on the component. </p> </li> <li> <p>Solder the connectors on the main PCB All connectors are marked in the picture with \"CN_...\". </p> </li> <li> <p>Solder UPS connection wires If you're using a UPS battery to power the Sushi Board, you'll need to solder the 4 required wires. See the LX-2BUPS wiring section and the CN_BATT connector in the UPS schematic diagram in the hardware guide.</p> </li> <li> <p>Solder the module headers Some modules, such as relays and IO expanders, are usually supplied without pre-soldered headers. In this case, solder them yourself. Note: all use 2.54 mm male headers. Important note about the \"PCF8575\" IO Expander: this module is often shipped with the front connector (the shorter one) bent. For Sushi Board installation, do not use this bent header \u2014 instead, use the straight one provided in the kit.</p> </li> <li> <p>Solder the General Purpose connectors (OPTIONAL) If you plan to use them, you can solder the extra GP connectors. Otherwise, you can leave them unmounted for now. </p> </li> </ol>"},{"location":"guide/#plug-add-on-modules","title":"Plug add-on modules","text":"<p>Once soldering is complete, you can plug the add-on modules onto the board:</p> <ul> <li>Micro ESP32-DevKitC board: be careful to mount it on the correct side (USB connector to the right, as printed on the PCB)</li> <li>Buzzer: make sure to align the \"+\" pin correctly</li> <li>IO Expander module: cannot be inserted incorrectly</li> <li>Relay modules</li> </ul> <p>If, for some reason, you're not using the top board:</p> <ul> <li>The OLED can be plugged directly into the base main board</li> <li>The keyboard must be plugged using the flat cable, left-aligned to pin 1 of the connector (see the keyboard schematic diagram for details)</li> </ul>"},{"location":"guide/#top-pcb-assembly","title":"Top PCB assembly","text":"<p>The Top PCB is needed to set up the Sushi Board in \"castle\" configuration. This PCB doesn't contain any circuit traces \u2014 it's only used as mechanical support. All \"fix kits\" are listed in the mounting hardware contents list.</p> <ul> <li>Fix the OLED using the \"OLED fix kit\". Washers must be placed between the module and the top PCB</li> <li>Fix the UPS using the \"Battery pack fix kit\"</li> <li>Fix the MODEM using the \"Modem fix kit\"</li> <li>Attach the keyboard to the PCB by passing the flat cable through the slot in the PCB. Align the flat cable to pin 6 on the connector (see the keyboard schematic diagram for more details)</li> <li>Finally, fix the top PCB to the bottom using the \"TOP PCB fix kit\"</li> </ul>"},{"location":"guide/#first-start","title":"First start","text":""},{"location":"guide/#connect-the-power-supply","title":"Connect the power supply","text":"<p>There are different options to connect power to the board \u2014 see all available methods in the CN_BATT diagram.</p>"},{"location":"guide/#system-test","title":"System test","text":"<p>The Sushi Board comes with the Sushi Framework preloaded. This allows for a quick system test at first startup. By browsing the user interface, you can perform a basic hardware check. For more details, see the Sushi Framework documentation.</p>"},{"location":"guide/#setup-development","title":"Setup &amp; development","text":"<p>At this stage, the Sushi Board is ready to use. You have two main options:</p> <ul> <li>Start using the Sushi Framework, which gives you a ready-to-develop system using MicroPython. In this case, refer to the Sushi Framework documentation.</li> <li>Develop and flash your own firmware using your preferred environment (Arduino, Espressif IDF, or others).</li> </ul>"},{"location":"hardware/","title":"Sushi board - Schematics &amp; pinout","text":""},{"location":"hardware/#main-pcb-overview","title":"Main PCB overview","text":"Main board view <p>This is the main PCB where all components and add-on modules (except modem and battery UPS) are connected.</p>"},{"location":"hardware/#top-pcb-overview","title":"Top PCB overview","text":"Top board view <p>The top PCB does not include any circuit tracks; it serves only as a mechanical support for the screen, keyboard, battery, and modem. Using it is OPTIONAL, depending on your requirements.</p>"},{"location":"hardware/#connectors","title":"Connectors","text":""},{"location":"hardware/#cn_batt","title":"CN_BATT","text":"<p>Power connection</p> Pin Number Description GND 1 Power supply GND* Normally connected to UPS Battery or external USB power supply (no battery) VIN 2 Main power supply input* Connected to micro ADC input to detect external power supply loss* Range: 0-14V* ESP32 function: I36 VB 3 Battery level detection* Connected to micro ADC input to detect battery voltage level* Range: 0-14V* ESP32 function: IO34 5VIN 4 Main board 5V power supply* Normally connected to UPS Battery output or external USB power supply (no battery)* Range: 5V <p>Schematic diagram </p> <p>Power modes  There are different ways to power the Sushi board:</p> <ul> <li>Powered by a direct 5V power supply, without any external UPS or battery. In this case, connect:   <p>CN_BATT pin 1 (GND label) to \"-\" CN_BATT pin 4 (5VIN label) to \"+\"  </p> </li> </ul> <p>Typically, the USB-C Socket is used (RED wire is \"+\", BLACK wire is \"-\")  </p> <ul> <li> <p>Powered by the provided UPS unit. In this configuration, both external power presence and battery level can be monitored.  </p> </li> <li> <p>Powered via the USB connector of the ESP32 DevKitC board. This is the typical setup during software development, where the firmware is uploaded directly to the ESP32 board. To avoid damage, disconnect any other power sources from CN_BATT when using this mode.  </p> </li> <li> <p>Powered by an external custom battery or circuit. In this case, the VIN and VB pins can still be used in a custom way to monitor external power and battery level. Be careful not to exceed the MAX input range of these pins. You can adapt the ADC voltage divider by changing resistor values to support a different input range. Note that 5VIN must always be a 5V power source coming from the external circuit.</p> </li> </ul>"},{"location":"hardware/#cn_ext-ts1-temp-sensor","title":"CN_EXT-TS1 (temp. sensor)","text":"<p>Wired external DS18B20 temperature sensor</p> Pin Number Description GND 1 Ground wire S 2 Signal wire 5V 3 Power supply wire <p>Schematic diagram </p>"},{"location":"hardware/#cn_gpio1-gpio","title":"CN_GPIO1 (GPIO)","text":"<p>General-purpose I/O directly connected to the ESP32 microcontroller on the ESP32-DevKitC board.</p> Pin Number Description GND 1 Ground for GPIO IO1 2 General-purpose Input/Output* ESP32 function: IO19 IO2 3 General-purpose Input/Output* ESP32 function: IO18 IO3 4 General-purpose Input/Output* ESP32 function: IO5"},{"location":"hardware/#cn_gpio2-gpio","title":"CN_GPIO2 (GPIO)","text":"<p>General-purpose I/O directly connected to the ESP32 microcontroller on the ESP32-DevKitC board.</p> Pin Number Description GND 1 Ground for GPIO IO4 2 General-purpose Input/Output* ESP32 function: IO4 IO5 3 General-purpose Input/Output* ESP32 function: IO13 O1 4 General-purpose Output* ESP32 function: IO2* This pin is used by the ESP32 during boot. For safety, use it as an output only (after boot, managed by firmware). If used as input, ensure no external signal forces it during boot as this may prevent the board from starting properly."},{"location":"hardware/#cn_gpio3-gpio","title":"CN_GPIO3 (GPIO)","text":"<p>General-purpose I/O directly connected to the ESP32 microcontroller on the ESP32-DevKitC board.</p> Pin Number Description GND 1 Ground for GPIO IN1 2 General-purpose Input* ESP32 function: I39* This pin is labeled \"VN\" on the DevKitC board IN2 3 General-purpose Input* ESP32 function: I35 GND 4 Ground for GPIO"},{"location":"hardware/#cn_ioe_00-03-io-exp","title":"CN_IOE_00-03 (IO-exp)","text":"<p>Inputs connected to the PCF8575 I/O expander. By default, all inputs on CN_IOE_00-03 are used for the 4-button keyboard. If keyboard management is disabled, they can be used as general-purpose inputs.</p> Pin Number Description P0-1 1 Connected to Pin 00 on PCF8575* Default: keyboard P0-2 2 Connected to Pin 01 on PCF8575* Default: keyboard P0-3 3 Connected to Pin 02 on PCF8575* Default: keyboard P0-4 4 Connected to Pin 03 on PCF8575* Default: keyboard"},{"location":"hardware/#cn_ioe_04-07-io-exp","title":"CN_IOE_04-07 (IO-exp)","text":"<p>General-purpose inputs connected to the PCF8575 I/O expander.</p> Pin Number Description P0-5 1 Connected to Pin 04 on PCF8575 P0-6 2 Connected to Pin 05 on PCF8575 P0-7 3 Connected to Pin 06 on PCF8575 P0-8 4 Connected to Pin 07 on PCF8575"},{"location":"hardware/#cn_ioe_10-13-io-exp","title":"CN_IOE_10-13 (IO-exp)","text":"<p>General-purpose inputs connected to the PCF8575 I/O expander.</p> Pin Number Description P1-1 1 Connected to Pin 10 on PCF8575 P1-2 2 Connected to Pin 11 on PCF8575 P1-3 3 Connected to Pin 12 on PCF8575 P1-4 4 Connected to Pin 13 on PCF8575"},{"location":"hardware/#cn_ioe_14-17-io-exp","title":"CN_IOE_14-17 (IO-exp)","text":"<p>General-purpose inputs connected to the PCF8575 I/O expander.</p> Pin Number Description P1-5 1 Connected to Pin 14 on PCF8575 P1-6 2 Connected to Pin 15 on PCF8575 P1-7 3 Connected to Pin 16 on PCF8575 P1-8 4 Connected to Pin 17 on PCF8575 <p>Schematic diagram </p>"},{"location":"hardware/#cn_modem","title":"CN_MODEM","text":"<p>Modem connection. This interface can also be used for other devices or modules, depending on your application.</p> Pin Number Description PK 1 Modem \"power key\" pin (if required by the module)* ESP32 function: IO32* Can also be used as GPIO GND(MOS) 2 MOS-controlled GND, used to switch the modem on/off* ESP32 function: IO23 (MOS gate)* Can also control external device power TX 3 Modem UART TX (micro RX)* ESP32 function: IO26* Can also be used as GPIO RX 4 Modem UART RX (micro TX)* ESP32 function: IO27* Can also be used as GPIO 5V 5 5V power supply for modem <p>Schematic diagram </p>"},{"location":"hardware/#add-on-modules","title":"Add-on modules","text":""},{"location":"hardware/#microcontroller-board","title":"Microcontroller board","text":"<p>Model: ESP32 DevKitC v4, WROVER SoC - 4M Flash - 4M PSRAM - USB TYPE-C - PCB WiFi Antenna.</p> <p>Description The ESP32 DevKitC board is the core of the Sushi Board and the only required module. It is a development board manufactured by Espressif, the ESP32 chip producer. Complete documentation is available here: Espressif ESP32-DevKitC. Any ESP32 DevKitC v4 board can be used, as they are all pin-compatible. Note: If using a model with an external antenna connector, even if it has a visible PCB antenna, it may not be internally connected\u2014so in that case, you MUST use the external antenna for proper WiFi operation.</p> <p>Software control The ESP32 board can be programmed with several IDEs/languages, such as Espressif IDF (C/C++), Arduino (C/C++), and MicroPython. The board is preloaded with the Sushi Framework, which handles core tasks and integrates MicroPython for custom development. For more details, see the Sushi Framework documentation.</p> <p>Schematic diagram </p>"},{"location":"hardware/#io-expander","title":"IO-Expander","text":"<p>Model: PCF8575 IO-Expander module</p> <p>Description This module allows you to add an extra 16 GPIOs to the Sushi Board. It communicates via the I2C interface.</p> <p>Software control The PCF8575 IO-Expander is connected to the I2C data line on ESP32 pins IO22 and IO21. If using the Sushi Framework, the driver is integrated, and the IO-Expander can be managed by the MicroPython high-level API (see Sushi Framework DOC).</p> <p>Schematic diagram </p>"},{"location":"hardware/#screen","title":"Screen","text":"<p>Model: SSD1306</p> <p>Description 0.96\" 128x64 pixel I2C OLED module. It can be plugged directly onto the main Sushi PCB (bottom) or fixed on the top PCB support with the provided cable.</p> <p>Software control The SSD1306 OLED is connected to the I2C data line on ESP32 pins IO22 and IO21. If using the Sushi Framework, the driver is integrated, and the SSD1306 OLED can be managed by the MicroPython high-level API (see Sushi Framework DOC).</p> <p>Schematic diagram </p>"},{"location":"hardware/#keyboard","title":"Keyboard","text":"<p>Model: 4-button membrane keyboard</p> <p>Description It is connected to the Sushi Board via the I2C IO-Expander module.</p> <p>Software control The keypad is connected to the IO-Expander input on P0..P3. If using the Sushi Framework, keypad management is integrated and used to navigate the user menu. With the MicroPython high-level API, you can integrate your application-specific menu (see Sushi Framework DOC).</p> <p>Schematic diagram Note that the 4-button keyboard has a 5-pin flat cable:</p> <ul> <li>one is a common pin</li> <li>4 pins corresponding to each button that connect to the common pin when a button is pressed</li> </ul> <p>The keyboard connector has 6 pins with GND on both pins 1 and 6. This allows you to plug the keyboard on either side, without twisting the flat cable, by plugging the connector aligned to the left or right.</p> <p></p>"},{"location":"hardware/#relays","title":"Relays","text":"<p>Model: Wemos D1 mini relays</p> <p>Description Normally open contact 5A (250VAC/30VDC), 10A (125VAC), MAX: 1250VA/150W. Normally closed contact 3A (250VAC/30VDC), MAX: 750VA/90W. Relay output can be used to enable external devices, even with AC power. Module details: Wemos D1 Mini.</p> <p>Software control Relays are connected directly to ESP32 pins IO12 and IO15. They can be managed by setting the pin as an output with an ON/OFF signal.</p> <p>Schematic diagram </p>"},{"location":"hardware/#buzzer","title":"Buzzer","text":"<p>Model: 3V Active Buzzer</p> <p>Description It can be directly controlled by a MicroPython GPIO pin. It can produce different sounds depending on the frequency and duty cycle of the signal used to control it. It is a general-purpose component and can be freely used depending on the application.</p> <p>Software control Connected directly to ESP32 pin IO25. It can be managed by setting the pin as an output with a PWM wave to modulate the frequency or simply with an ON/OFF signal.</p> <p>Schematic diagram </p>"},{"location":"hardware/#modem","title":"Modem","text":"<p>Model: SIMcom SIM7672X (NA,E,G) modem module.</p> <p>Description The modem is optional and is the only module fixed to the top support PCB, not on the main bottom PCB. This choice was made because there is no standard solution that can cover all possible needs. The SIMcom SIM7672X is a modem module with worldwide band support (NA=North America, E=Europe, G=Global) and certifications. Any SIM7672X can be compatible: SIM7672X. Even any module with a UART interface can be interfaced with the Sushi Board (but may not be compatible with the Sushi Framework if you're using it).</p> <p>Software control The modem module is connected and controlled by the microcontroller through the connector CN_MODEM. If using the Sushi Framework, modem management for SIM7672X is integrated. With the MicroPython high-level API, you can perform common operations with the modem (see Sushi Framework DOC).</p>"},{"location":"hardware/#ups-battery","title":"UPS Battery","text":"<p>Model: LX-2BUPS DC-DC, USB-C, 15W 3A, 5V version</p> <p>Description UPS unit, holds 2x18650 lithium batteries. Important: For the LX-2BUPS module, the 18650 batteries must be the flat-top version.</p> <p>Software control The UPS module is connected to the Sushi Board via the CN_BATT connector. One ADC is connected to the main power supply IN to detect main power loss, while the second ADC is used to measure the battery level. ADC readings can be performed directly by managing the ADC pins or, if using the Sushi Framework, with the MicroPython high-level API (see Sushi Framework DOC).</p> <p>Schematic diagram </p>"},{"location":"hardware/#board-components","title":"Board components","text":""},{"location":"hardware/#gp-optional-components","title":"GP Optional Components","text":"<p>On the Sushi Board, there are several general-purpose (GP) elements that are all optional and can be used or not, depending on the specific application. All these elements can be omitted in a first step for basic use of the board. </p>"},{"location":"kit_content/","title":"Sushi board - KIT contents list","text":""},{"location":"kit_content/#pcbs","title":"PCBs","text":"Name Features Picture Quantity Base PCB Main PCB 1 Top PCB Optional top support PCB for \"castle\" mounting. Does not contain any circuit track. 1"},{"location":"kit_content/#add-on-modules","title":"Add-on modules","text":"Name Features Picture Quantity ESP32 DevKitC v4 ESP32 microcontroller board: WROVER SoC - 4M Flash - 4M PSRAM - USB TYPE-C - PCB Wifi Antenna 1 Wifi antenna 2.4G OPTIONAL external antenna necessary if a DevKitC v4 with an ESP32 SoC model using an external antenna plug is used 1/0 SIMcom SIM7672X SIMcom SIM7672X (NA, E, G) modem module with adhesive antenna 1 (kits with modem) Modem connection cable Cable with connectors: Dupont header female 5P (Sushi Board side) -&gt; Modem. 1 (kits with modem) PCF8575 PCF8575 IO-Expander module. 1 LX-2BUPS DC-DC UPS battery: USB-C - 15W 3A - 5V version* Includes 4x 20cm battery pack wires.* 18650 batteries are not included. Important: For this UPS, 18650 batteries must be the flat-top version. 1 SSD1306 OLED screen 1 Screen connection cable Dupont cable male-female 4P 10cm to connect OLED on top PCB. 1 4 buttons keypad 4-button membrane keyboard 1 Wemos D1 mini relays Relay output module 2 Buzzer 3V Active Buzzer 1"},{"location":"kit_content/#mounting-hardware","title":"Mounting hardware","text":"Name Description Picture Quantity TOP PCB fix kit * 2x M3 6mm screws * 1x M3 30mm female-female hex spacer* 1x M3 30mm female-male hex spacer 4 OLED fix kit To fix OLED on top PCB* 1x M3 10mm screw* 2x M3 1mm ring washers* 1x M3 hex nut 4 Battery pack fix kit To fix battery pack on top PCB* 2x M3 6mm screws* 1x M3 30mm female-female hex spacer 4 Modem fix kit To fix modem on top PCB* 2x M2 6mm screws* 1x M2 10mm female-female hex spacer 4 DIN Rail Adapter OPTIONAL kit of 2 brackets to fix the board to a DIN rail 0"},{"location":"kit_content/#onboard-components-connectors","title":"Onboard components &amp; connectors","text":"Name Description Picture Quantity KF2EDG 2.54 3P Connector KF2EDG 2.54 3P, Curved needle 1 KF2EDG 2.54 4P Connector KF2EDG 2.54 4P, Curved needle 8 Header male 2.54 1x40 Male header 2.54mm, 1 row, 40 pin 3 Header male 2.54 2x40 Male header 2.54mm, 2 rows, 40 pin 1 Header female 2.54 kit Female socket header kit* 2x 19-pin* 4x 8-pin* 2x 4-pin* 1x 5-pin* 2x 10-pin 1 IRLZ44NPBF MOSFET for modem power supply control 1 A09-103 10K Resistor array (8x 10K) for IO-Expander pull-up 2 Power-in ADC divider Power-in and battery ADC divider resistors* 10K 1/4W* 47K 1/4WAllows an input range of 0~14V max 2 DS18B20 pull-up resistor Temperature sensor pull-up resistor 4.7K 1/4W. Required for DS18B20 1 MOSFET (modem power) resistors Resistors for MOSFET to control modem power supply* 10K 1/4W* 20 1/4W 1 DS18B20 TO-92 Onboard temperature sensor 1 SK-12D02 (VG3) Onboard switch for power supply 1"},{"location":"kit_content/#external-accessories-sensors","title":"External accessories &amp; sensors","text":"Name Description Picture Quantity Cabled DS18B20 Cabled external temperature sensor 1 Panel LED Waterproof IP67 Metal LED (green, 6mm, 3-6V) 1 Switch button with LED OPTIONAL switch button with circular green light (LED).* 12mm long* Self-locking* LED power: 3-9V* Includes 4x wires for 12mm switch button 0 USB-C Socket USB-C 5A female socket, black. Useful for powering the Sushi Board when a UPS battery is not used or when installing in a plastic case 1"}]}